// ============================================================================
// SPRING BOOT APPLICATION STRUCTURE (API Bridge)
// ============================================================================

src/
└── main/
    ├── java/
    │   └── com/
    │       └── yourcompany/
    │           └── apibridge/
    │               ├── ApiBridgeApplication.java
    │               │
    │               ├── config/                          
    │               │   ├── GrpcClientConfig.java        # gRPC client configuration
    │               │   ├── WebConfig.java               # Web/CORS configuration
    │               │   └── SwaggerConfig.java           # API documentation
    │               │
    │               ├── controller/                      # REST API endpoints
    │               │   ├── UserController.java
    │               │   ├── OrderController.java
    │               │   └── HealthController.java
    │               │
    │               ├── service/                         # Business logic layer
    │               │   ├── UserService.java
    │               │   ├── OrderService.java
    │               │   └── HealthService.java
    │               │
    │               ├── grpc/                           # gRPC integration
    │               │   ├── client/
    │               │   │   ├── QuarkusUserClient.java
    │               │   │   ├── QuarkusOrderClient.java
    │               │   │   └── QuarkusHealthClient.java
    │               │   │
    │               │   ├── mapper/                     # gRPC ↔ REST mapping
    │               │   │   ├── UserMapper.java
    │               │   │   └── OrderMapper.java
    │               │   │
    │               │   └── monitor/
    │               │       └── GrpcConnectionMonitor.java
    │               │
    │               ├── dto/                            # REST API DTOs
    │               │   ├── request/
    │               │   │   ├── CreateUserRequest.java
    │               │   │   └── CreateOrderRequest.java
    │               │   │
    │               │   └── response/
    │               │       ├── UserResponse.java
    │               │       └── OrderResponse.java
    │               │
    │               └── exception/
    │                   ├── GrpcServiceException.java
    │                   └── GlobalExceptionHandler.java
    │
    └── resources/
        ├── application.yml
        └── proto/
            ├── user-service.proto
            └── order-service.proto

// ============================================================================
// SPRING BOOT CONFIGURATION
// ============================================================================

// config/GrpcClientConfig.java
@Configuration
@EnableConfigurationProperties
public class GrpcClientConfig {

    @Bean
    @GrpcClient("quarkus-user-service")
    public NettyChannelBuilder userServiceChannelBuilder() {
        return NettyChannelBuilder.forAddress("localhost", 9090)
                .keepAliveTime(30, TimeUnit.SECONDS)
                .keepAliveTimeout(5, TimeUnit.SECONDS)
                .keepAliveWithoutCalls(true)
                .maxInboundMessageSize(4 * 1024 * 1024)
                .usePlaintext();
    }

    @Bean
    @GrpcClient("quarkus-order-service") 
    public NettyChannelBuilder orderServiceChannelBuilder() {
        return NettyChannelBuilder.forAddress("localhost", 9091)
                .keepAliveTime(30, TimeUnit.SECONDS)
                .keepAliveTimeout(5, TimeUnit.SECONDS)
                .keepAliveWithoutCalls(true)
                .maxInboundMessageSize(4 * 1024 * 1024)
                .usePlaintext();
    }
}

// ============================================================================
// gRPC CLIENT SERVICES
// ============================================================================

// grpc/client/QuarkusUserClient.java
@Service
@Slf4j
public class QuarkusUserClient {

    @GrpcClient("quarkus-user-service")
    private UserServiceGrpc.UserServiceBlockingStub userServiceStub;

    @GrpcClient("quarkus-user-service")
    private UserServiceGrpc.UserServiceStub userServiceAsyncStub;

    public UserProto.User createUser(UserProto.CreateUserRequest request) {
        try {
            return userServiceStub.createUser(request);
        } catch (StatusRuntimeException e) {
            log.error("Failed to create user via gRPC: {}", e.getStatus());
            throw new GrpcServiceException("User creation failed", e);
        }
    }

    public CompletableFuture<UserProto.User> createUserAsync(UserProto.CreateUserRequest request) {
        CompletableFuture<UserProto.User> future = new CompletableFuture<>();
        
        userServiceAsyncStub.createUser(request, new StreamObserver<UserProto.User>() {
            @Override
            public void onNext(UserProto.User user) {
                future.complete(user);
            }

            @Override
            public void onError(Throwable throwable) {
                future.completeExceptionally(throwable);
            }

            @Override
            public void onCompleted() {
                // Response handled in onNext
            }
        });

        return future;
    }

    public UserProto.User getUserById(String userId) {
        UserProto.GetUserRequest request = UserProto.GetUserRequest.newBuilder()
                .setUserId(userId)
                .build();
        
        return userServiceStub.getUser(request);
    }
}

// ============================================================================
// SERVICE LAYER (Business Logic)
// ============================================================================

// service/UserService.java
@Service
@Slf4j
public class UserService {

    private final QuarkusUserClient grpcClient;
    private final UserMapper userMapper;

    public UserService(QuarkusUserClient grpcClient, UserMapper userMapper) {
        this.grpcClient = grpcClient;
        this.userMapper = userMapper;
    }

    public UserResponse createUser(CreateUserRequest request) {
        // Convert REST DTO to gRPC message
        UserProto.CreateUserRequest grpcRequest = userMapper.toGrpcCreateRequest(request);
        
        // Call Quarkus service via gRPC
        UserProto.User grpcUser = grpcClient.createUser(grpcRequest);
        
        // Convert gRPC response back to REST DTO
        return userMapper.toRestResponse(grpcUser);
    }

    public CompletableFuture<UserResponse> createUserAsync(CreateUserRequest request) {
        UserProto.CreateUserRequest grpcRequest = userMapper.toGrpcCreateRequest(request);
        
        return grpcClient.createUserAsync(grpcRequest)
                .thenApply(userMapper::toRestResponse);
    }

    public UserResponse getUserById(String userId) {
        UserProto.User grpcUser = grpcClient.getUserById(userId);
        return userMapper.toRestResponse(grpcUser);
    }
}

// ============================================================================
// REST CONTROLLERS (Public API)
// ============================================================================

// controller/UserController.java
@RestController
@RequestMapping("/api/v1/users")
@Slf4j
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping
    public ResponseEntity<UserResponse> createUser(@Valid @RequestBody CreateUserRequest request) {
        log.info("Creating user: {}", request.getEmail());
        UserResponse response = userService.createUser(request);
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @PostMapping("/async")
    public CompletableFuture<ResponseEntity<UserResponse>> createUserAsync(
            @Valid @RequestBody CreateUserRequest request) {
        
        return userService.createUserAsync(request)
                .thenApply(response -> ResponseEntity.status(HttpStatus.CREATED).body(response));
    }

    @GetMapping("/{userId}")
    public ResponseEntity<UserResponse> getUser(@PathVariable String userId) {
        UserResponse response = userService.getUserById(userId);
        return ResponseEntity.ok(response);
    }
}

// ============================================================================
// MAPPERS (DTO Conversion)
// ============================================================================

// grpc/mapper/UserMapper.java
@Component
public class UserMapper {

    public UserProto.CreateUserRequest toGrpcCreateRequest(CreateUserRequest restRequest) {
        return UserProto.CreateUserRequest.newBuilder()
                .setEmail(restRequest.getEmail())
                .setFirstName(restRequest.getFirstName())
                .setLastName(restRequest.getLastName())
                .build();
    }

    public UserResponse toRestResponse(UserProto.User grpcUser) {
        return UserResponse.builder()
                .id(grpcUser.getId())
                .email(grpcUser.getEmail())
                .firstName(grpcUser.getFirstName())
                .lastName(grpcUser.getLastName())
                .createdAt(Instant.ofEpochSecond(grpcUser.getCreatedAt().getSeconds()))
                .build();
    }
}

// ============================================================================
// APPLICATION CONFIGURATION
// ============================================================================

// application.yml
server:
  port: 8080

grpc:
  client:
    quarkus-user-service:
      address: 'static://localhost:9090'
      keepAliveTime: 30s
      keepAliveTimeout: 5s
      keepAliveWithoutCalls: true
      negotiationType: plaintext
    quarkus-order-service:
      address: 'static://localhost:9091'
      keepAliveTime: 30s
      keepAliveTimeout: 5s
      keepAliveWithoutCalls: true
      negotiationType: plaintext

logging:
  level:
    com.yourcompany.apibridge: DEBUG
    io.grpc: INFO
    net.devh.boot.grpc: INFO

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

// ============================================================================
// EXCEPTION HANDLING
// ============================================================================

// exception/GlobalExceptionHandler.java
@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {

    @ExceptionHandler(GrpcServiceException.class)
    public ResponseEntity<ErrorResponse> handleGrpcServiceException(GrpcServiceException e) {
        log.error("gRPC service error", e);
        
        ErrorResponse error = ErrorResponse.builder()
                .message("Service temporarily unavailable")
                .code("SERVICE_ERROR")
                .timestamp(Instant.now())
                .build();
                
        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body(error);
    }

    @ExceptionHandler(StatusRuntimeException.class)
    public ResponseEntity<ErrorResponse> handleGrpcStatusException(StatusRuntimeException e) {
        log.error("gRPC status error: {}", e.getStatus());
        
        HttpStatus httpStatus = mapGrpcStatusToHttp(e.getStatus().getCode());
        
        ErrorResponse error = ErrorResponse.builder()
                .message(e.getStatus().getDescription())
                .code("GRPC_" + e.getStatus().getCode().name())
                .timestamp(Instant.now())
                .build();
                
        return ResponseEntity.status(httpStatus).body(error);
    }

    private HttpStatus mapGrpcStatusToHttp(Status.Code grpcCode) {
        return switch (grpcCode) {
            case NOT_FOUND -> HttpStatus.NOT_FOUND;
            case INVALID_ARGUMENT -> HttpStatus.BAD_REQUEST;
            case ALREADY_EXISTS -> HttpStatus.CONFLICT;
            case PERMISSION_DENIED -> HttpStatus.FORBIDDEN;
            case UNAUTHENTICATED -> HttpStatus.UNAUTHORIZED;
            default -> HttpStatus.INTERNAL_SERVER_ERROR;
        };
    }
}###№#########



// ============================================================================
// SPRING BOOT APPLICATION STRUCTURE (API Bridge)
// ============================================================================

src/
└── main/
    ├── java/
    │   └── com/
    │       └── yourcompany/
    │           └── apibridge/
    │               ├── ApiBridgeApplication.java
    │               │
    │               ├── config/                          
    │               │   ├── GrpcClientConfig.java        # gRPC client configuration
    │               │   ├── WebConfig.java               # Web/CORS configuration
    │               │   └── SwaggerConfig.java           # API documentation
    │               │
    │               ├── controller/                      # REST API endpoints
    │               │   ├── UserController.java
    │               │   ├── OrderController.java
    │               │   └── HealthController.java
    │               │
    │               ├── service/                         # Business logic layer
    │               │   ├── UserService.java
    │               │   ├── OrderService.java
    │               │   └── HealthService.java
    │               │
    │               ├── grpc/                           # gRPC integration
    │               │   ├── client/
    │               │   │   ├── QuarkusUserClient.java
    │               │   │   ├── QuarkusOrderClient.java
    │               │   │   └── QuarkusHealthClient.java
    │               │   │
    │               │   ├── mapper/                     # gRPC ↔ REST mapping
    │               │   │   ├── UserMapper.java
    │               │   │   └── OrderMapper.java
    │               │   │
    │               │   └── monitor/
    │               │       └── GrpcConnectionMonitor.java
    │               │
    │               ├── dto/                            # REST API DTOs
    │               │   ├── request/
    │               │   │   ├── CreateUserRequest.java
    │               │   │   └── CreateOrderRequest.java
    │               │   │
    │               │   └── response/
    │               │       ├── UserResponse.java
    │               │       └── OrderResponse.java
    │               │
    │               └── exception/
    │                   ├── GrpcServiceException.java
    │                   └── GlobalExceptionHandler.java
    │
    └── resources/
        ├── application.yml
        └── proto/
            ├── user-service.proto
            └── order-service.proto

// ============================================================================
// SPRING BOOT CONFIGURATION
// ============================================================================

// config/GrpcClientConfig.java
@Configuration
@EnableConfigurationProperties
public class GrpcClientConfig {

    @Bean
    @GrpcClient("quarkus-user-service")
    public NettyChannelBuilder userServiceChannelBuilder() {
        return NettyChannelBuilder.forAddress("localhost", 9090)
                .keepAliveTime(30, TimeUnit.SECONDS)
                .keepAliveTimeout(5, TimeUnit.SECONDS)
                .keepAliveWithoutCalls(true)
                .maxInboundMessageSize(4 * 1024 * 1024)
                .usePlaintext();
    }

    @Bean
    @GrpcClient("quarkus-order-service") 
    public NettyChannelBuilder orderServiceChannelBuilder() {
        return NettyChannelBuilder.forAddress("localhost", 9091)
                .keepAliveTime(30, TimeUnit.SECONDS)
                .keepAliveTimeout(5, TimeUnit.SECONDS)
                .keepAliveWithoutCalls(true)
                .maxInboundMessageSize(4 * 1024 * 1024)
                .usePlaintext();
    }
}

// ============================================================================
// gRPC CLIENT SERVICES
// ============================================================================

// grpc/client/QuarkusUserClient.java
@Service
@Slf4j
public class QuarkusUserClient {

    @GrpcClient("quarkus-user-service")
    private UserServiceGrpc.UserServiceBlockingStub userServiceStub;

    @GrpcClient("quarkus-user-service")
    private UserServiceGrpc.UserServiceStub userServiceAsyncStub;

    public UserProto.User createUser(UserProto.CreateUserRequest request) {
        try {
            return userServiceStub.createUser(request);
        } catch (StatusRuntimeException e) {
            log.error("Failed to create user via gRPC: {}", e.getStatus());
            throw new GrpcServiceException("User creation failed", "user-service", e);
        } catch (Exception e) {
            log.error("Unexpected error calling user service", e);
            throw new QuarkusServiceUnavailableException("user-service", e);
        }
    }

    public CompletableFuture<UserProto.User> createUserAsync(UserProto.CreateUserRequest request) {
        CompletableFuture<UserProto.User> future = new CompletableFuture<>();
        
        userServiceAsyncStub.createUser(request, new StreamObserver<UserProto.User>() {
            @Override
            public void onNext(UserProto.User user) {
                future.complete(user);
            }

            @Override
            public void onError(Throwable throwable) {
                if (throwable instanceof StatusRuntimeException) {
                    future.completeExceptionally(
                        new GrpcServiceException("Async user creation failed", "user-service", throwable));
                } else {
                    future.completeExceptionally(
                        new QuarkusServiceUnavailableException("user-service", throwable));
                }
            }

            @Override
            public void onCompleted() {
                // Response handled in onNext
            }
        });

        return future;
    }

    public UserProto.User getUserById(String userId) {
        try {
            UserProto.GetUserRequest request = UserProto.GetUserRequest.newBuilder()
                    .setUserId(userId)
                    .build();
            
            return userServiceStub.getUser(request);
        } catch (StatusRuntimeException e) {
            log.error("Failed to get user {} via gRPC: {}", userId, e.getStatus());
            throw new GrpcServiceException("User retrieval failed", "user-service", e);
        } catch (Exception e) {
            log.error("Unexpected error getting user {}", userId, e);
            throw new QuarkusServiceUnavailableException("user-service", e);
        }
    }
}

// ============================================================================
// SERVICE LAYER (Business Logic)
// ============================================================================

// service/UserService.java
@Service
@Slf4j
public class UserService {

    private final QuarkusUserClient grpcClient;
    private final UserMapper userMapper;

    public UserService(QuarkusUserClient grpcClient, UserMapper userMapper) {
        this.grpcClient = grpcClient;
        this.userMapper = userMapper;
    }

    public UserResponse createUser(CreateUserRequest request) {
        // Convert REST DTO to gRPC message
        UserProto.CreateUserRequest grpcRequest = userMapper.toGrpcCreateRequest(request);
        
        // Call Quarkus service via gRPC
        UserProto.User grpcUser = grpcClient.createUser(grpcRequest);
        
        // Convert gRPC response back to REST DTO
        return userMapper.toRestResponse(grpcUser);
    }

    public CompletableFuture<UserResponse> createUserAsync(CreateUserRequest request) {
        UserProto.CreateUserRequest grpcRequest = userMapper.toGrpcCreateRequest(request);
        
        return grpcClient.createUserAsync(grpcRequest)
                .thenApply(userMapper::toRestResponse);
    }

    public UserResponse getUserById(String userId) {
        UserProto.User grpcUser = grpcClient.getUserById(userId);
        return userMapper.toRestResponse(grpcUser);
    }
}

// ============================================================================
// REST CONTROLLERS (Public API)
// ============================================================================

// controller/UserController.java
@RestController
@RequestMapping("/api/v1/users")
@Slf4j
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping
    public ResponseEntity<UserResponse> createUser(@Valid @RequestBody CreateUserRequest request) {
        log.info("Creating user: {}", request.getEmail());
        UserResponse response = userService.createUser(request);
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @PostMapping("/async")
    public CompletableFuture<ResponseEntity<UserResponse>> createUserAsync(
            @Valid @RequestBody CreateUserRequest request) {
        
        return userService.createUserAsync(request)
                .thenApply(response -> ResponseEntity.status(HttpStatus.CREATED).body(response));
    }

    @GetMapping("/{userId}")
    public ResponseEntity<UserResponse> getUser(@PathVariable String userId) {
        UserResponse response = userService.getUserById(userId);
        return ResponseEntity.ok(response);
    }
}

// ============================================================================
// MAPPERS (DTO Conversion)
// ============================================================================

// grpc/mapper/UserMapper.java
@Component
public class UserMapper {

    public UserProto.CreateUserRequest toGrpcCreateRequest(CreateUserRequest restRequest) {
        return UserProto.CreateUserRequest.newBuilder()
                .setEmail(restRequest.getEmail())
                .setFirstName(restRequest.getFirstName())
                .setLastName(restRequest.getLastName())
                .build();
    }

    public UserResponse toRestResponse(UserProto.User grpcUser) {
        return UserResponse.builder()
                .id(grpcUser.getId())
                .email(grpcUser.getEmail())
                .firstName(grpcUser.getFirstName())
                .lastName(grpcUser.getLastName())
                .createdAt(Instant.ofEpochSecond(grpcUser.getCreatedAt().getSeconds()))
                .build();
    }
}

// ============================================================================
// APPLICATION CONFIGURATION
// ============================================================================

// application.yml
server:
  port: 8080

grpc:
  client:
    quarkus-user-service:
      address: 'static://localhost:9090'
      keepAliveTime: 30s
      keepAliveTimeout: 5s
      keepAliveWithoutCalls: true
      negotiationType: plaintext
    quarkus-order-service:
      address: 'static://localhost:9091'
      keepAliveTime: 30s
      keepAliveTimeout: 5s
      keepAliveWithoutCalls: true
      negotiationType: plaintext

logging:
  level:
    com.yourcompany.apibridge: DEBUG
    io.grpc: INFO
    net.devh.boot.grpc: INFO

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

// ============================================================================
// CUSTOM EXCEPTIONS
// ============================================================================

// exception/GrpcServiceException.java
public class GrpcServiceException extends RuntimeException {
    
    private final Status.Code grpcStatusCode;
    private final String serviceName;

    public GrpcServiceException(String message) {
        super(message);
        this.grpcStatusCode = null;
        this.serviceName = null;
    }

    public GrpcServiceException(String message, Throwable cause) {
        super(message, cause);
        this.grpcStatusCode = extractGrpcStatus(cause);
        this.serviceName = null;
    }

    public GrpcServiceException(String message, String serviceName, Throwable cause) {
        super(message, cause);
        this.grpcStatusCode = extractGrpcStatus(cause);
        this.serviceName = serviceName;
    }

    public GrpcServiceException(String message, Status.Code grpcStatusCode, String serviceName) {
        super(message);
        this.grpcStatusCode = grpcStatusCode;
        this.serviceName = serviceName;
    }

    private Status.Code extractGrpcStatus(Throwable cause) {
        if (cause instanceof StatusRuntimeException) {
            return ((StatusRuntimeException) cause).getStatus().getCode();
        }
        return Status.Code.UNKNOWN;
    }

    public Status.Code getGrpcStatusCode() {
        return grpcStatusCode;
    }

    public String getServiceName() {
        return serviceName;
    }

    public boolean isRetryable() {
        return grpcStatusCode != null && 
               (grpcStatusCode == Status.Code.UNAVAILABLE || 
                grpcStatusCode == Status.Code.DEADLINE_EXCEEDED ||
                grpcStatusCode == Status.Code.RESOURCE_EXHAUSTED);
    }
}

// exception/QuarkusServiceUnavailableException.java
public class QuarkusServiceUnavailableException extends GrpcServiceException {
    
    public QuarkusServiceUnavailableException(String serviceName) {
        super("Quarkus service is unavailable: " + serviceName, Status.Code.UNAVAILABLE, serviceName);
    }
    
    public QuarkusServiceUnavailableException(String serviceName, Throwable cause) {
        super("Quarkus service is unavailable: " + serviceName, serviceName, cause);
    }
}

// exception/ErrorResponse.java
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class ErrorResponse {
    private String message;
    private String code;
    private Instant timestamp;
    private String path;
    private String serviceName;
    private Map<String, Object> details;
}

// ============================================================================
// EXCEPTION HANDLING
// ============================================================================

// exception/GlobalExceptionHandler.java
@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {

    @ExceptionHandler(GrpcServiceException.class)
    public ResponseEntity<ErrorResponse> handleGrpcServiceException(
            GrpcServiceException e, HttpServletRequest request) {
        log.error("gRPC service error from {}: {}", e.getServiceName(), e.getMessage(), e);
        
        HttpStatus httpStatus = mapGrpcStatusToHttp(e.getGrpcStatusCode());
        
        ErrorResponse error = ErrorResponse.builder()
                .message(e.getMessage())
                .code("GRPC_SERVICE_ERROR")
                .timestamp(Instant.now())
                .path(request.getRequestURI())
                .serviceName(e.getServiceName())
                .details(Map.of(
                    "grpcStatus", e.getGrpcStatusCode() != null ? e.getGrpcStatusCode().name() : "UNKNOWN",
                    "retryable", e.isRetryable()
                ))
                .build();
                
        return ResponseEntity.status(httpStatus).body(error);
    }

    @ExceptionHandler(QuarkusServiceUnavailableException.class)
    public ResponseEntity<ErrorResponse> handleQuarkusServiceUnavailable(
            QuarkusServiceUnavailableException e, HttpServletRequest request) {
        log.error("Quarkus service unavailable: {}", e.getServiceName(), e);
        
        ErrorResponse error = ErrorResponse.builder()
                .message("Service temporarily unavailable. Please try again later.")
                .code("SERVICE_UNAVAILABLE")
                .timestamp(Instant.now())
                .path(request.getRequestURI())
                .serviceName(e.getServiceName())
                .details(Map.of(
                    "retryable", true,
                    "estimatedRetryAfter", "30 seconds"
                ))
                .build();
                
        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE)
                .header("Retry-After", "30")
                .body(error);
    }

    @ExceptionHandler(StatusRuntimeException.class)
    public ResponseEntity<ErrorResponse> handleGrpcStatusException(StatusRuntimeException e) {
        log.error("gRPC status error: {}", e.getStatus());
        
        HttpStatus httpStatus = mapGrpcStatusToHttp(e.getStatus().getCode());
        
        ErrorResponse error = ErrorResponse.builder()
                .message(e.getStatus().getDescription())
                .code("GRPC_" + e.getStatus().getCode().name())
                .timestamp(Instant.now())
                .build();
                
        return ResponseEntity.status(httpStatus).body(error);
    }

    private HttpStatus mapGrpcStatusToHttp(Status.Code grpcCode) {
        return switch (grpcCode) {
            case NOT_FOUND -> HttpStatus.NOT_FOUND;
            case INVALID_ARGUMENT -> HttpStatus.BAD_REQUEST;
            case ALREADY_EXISTS -> HttpStatus.CONFLICT;
            case PERMISSION_DENIED -> HttpStatus.FORBIDDEN;
            case UNAUTHENTICATED -> HttpStatus.UNAUTHORIZED;
            default -> HttpStatus.INTERNAL_SERVER_ERROR;
        };
    }
}