// ============================================================================
// CUSTOM gRPC CLIENT CONFIGURATION FOR POC
// ============================================================================

// config/GrpcClientConfig.java
@Configuration
@EnableConfigurationProperties(GrpcClientProperties.class)
@Slf4j
public class GrpcClientConfig {

    @Autowired
    private GrpcClientProperties grpcProperties;

    // Custom Channel Configuration with Connection Reuse
    @Bean("quarkusUserServiceChannel")
    @Primary
    public ManagedChannel quarkusUserServiceChannel() {
        log.info("Creating custom gRPC channel for user service");
        
        GrpcClientProperties.ServiceConfig serviceConfig = 
            grpcProperties.getClient().get("quarkus-user-service");
            
        return NettyChannelBuilder
                .forAddress(serviceConfig.getHost(), serviceConfig.getPort())
                .keepAliveTime(serviceConfig.getKeepAliveTime(), TimeUnit.SECONDS)
                .keepAliveTimeout(serviceConfig.getKeepAliveTimeout(), TimeUnit.SECONDS)
                .keepAliveWithoutCalls(serviceConfig.isKeepAliveWithoutCalls())
                .maxInboundMessageSize(serviceConfig.getMaxInboundMessageSize())
                .maxConnectionIdle(serviceConfig.getMaxConnectionIdle(), TimeUnit.SECONDS)
                .maxConnectionAge(serviceConfig.getMaxConnectionAge(), TimeUnit.SECONDS)
                .maxConnectionAgeGrace(serviceConfig.getMaxConnectionAgeGrace(), TimeUnit.SECONDS)
                .usePlaintext()
                // Custom settings for POC
                .intercept(new ConnectionMonitoringInterceptor("user-service"))
                .intercept(new RetryInterceptor(serviceConfig.getMaxRetryAttempts()))
                .executor(customGrpcExecutor())
                .build();
    }

    @Bean("quarkusOrderServiceChannel")
    public ManagedChannel quarkusOrderServiceChannel() {
        log.info("Creating custom gRPC channel for order service");
        
        GrpcClientProperties.ServiceConfig serviceConfig = 
            grpcProperties.getClient().get("quarkus-order-service");
            
        return NettyChannelBuilder
                .forAddress(serviceConfig.getHost(), serviceConfig.getPort())
                .keepAliveTime(serviceConfig.getKeepAliveTime(), TimeUnit.SECONDS)
                .keepAliveTimeout(serviceConfig.getKeepAliveTimeout(), TimeUnit.SECONDS)
                .keepAliveWithoutCalls(serviceConfig.isKeepAliveWithoutCalls())
                .maxInboundMessageSize(serviceConfig.getMaxInboundMessageSize())
                .maxConnectionIdle(serviceConfig.getMaxConnectionIdle(), TimeUnit.SECONDS)
                .maxConnectionAge(serviceConfig.getMaxConnectionAge(), TimeUnit.SECONDS)
                .maxConnectionAgeGrace(serviceConfig.getMaxConnectionAgeGrace(), TimeUnit.SECONDS)
                .usePlaintext()
                .intercept(new ConnectionMonitoringInterceptor("order-service"))
                .intercept(new RetryInterceptor(serviceConfig.getMaxRetryAttempts()))
                .executor(customGrpcExecutor())
                .build();
    }

    // Custom Thread Pool for gRPC calls
    @Bean("grpcExecutor")
    public Executor customGrpcExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(grpcProperties.getThreadPool().getCoreSize());
        executor.setMaxPoolSize(grpcProperties.getThreadPool().getMaxSize());
        executor.setQueueCapacity(grpcProperties.getThreadPool().getQueueCapacity());
        executor.setThreadNamePrefix("grpc-client-");
        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        executor.initialize();
        return executor;
    }

    // Graceful shutdown
    @PreDestroy
    public void shutdown() {
        log.info("Shutting down gRPC channels...");
        
        try {
            ManagedChannel userChannel = (ManagedChannel) 
                applicationContext.getBean("quarkusUserServiceChannel");
            ManagedChannel orderChannel = (ManagedChannel) 
                applicationContext.getBean("quarkusOrderServiceChannel");
                
            shutdownChannel(userChannel, "user-service");
            shutdownChannel(orderChannel, "order-service");
            
        } catch (Exception e) {
            log.error("Error during gRPC shutdown", e);
        }
    }
    
    private void shutdownChannel(ManagedChannel channel, String serviceName) {
        try {
            channel.shutdown();
            if (!channel.awaitTermination(5, TimeUnit.SECONDS)) {
                log.warn("Force shutting down {} channel", serviceName);
                channel.shutdownNow();
                channel.awaitTermination(2, TimeUnit.SECONDS);
            }
            log.info("Successfully shut down {} channel", serviceName);
        } catch (InterruptedException e) {
            log.warn("Interrupted while shutting down {} channel", serviceName);
            channel.shutdownNow();
        }
    }

    @Autowired
    private ApplicationContext applicationContext;
}

// ============================================================================
// CUSTOM PROPERTIES CONFIGURATION
// ============================================================================

@ConfigurationProperties(prefix = "grpc")
@Data
public class GrpcClientProperties {
    
    private Map<String, ServiceConfig> client = new HashMap<>();
    private ThreadPoolConfig threadPool = new ThreadPoolConfig();
    private PocTestConfig pocTest = new PocTestConfig();

    @Data
    public static class ServiceConfig {
        private String host = "localhost";
        private int port = 9090;
        private int keepAliveTime = 30;
        private int keepAliveTimeout = 5;
        private boolean keepAliveWithoutCalls = true;
        private int maxInboundMessageSize = 4 * 1024 * 1024;
        private int maxConnectionIdle = 300; // 5 minutes
        private int maxConnectionAge = 1800; // 30 minutes
        private int maxConnectionAgeGrace = 5;
        private int maxRetryAttempts = 3;
        private boolean enableConnectionPooling = true;
        private int connectionPoolSize = 10;
    }

    @Data
    public static class ThreadPoolConfig {
        private int coreSize = 5;
        private int maxSize = 20;
        private int queueCapacity = 100;
    }

    @Data
    public static class PocTestConfig {
        private boolean enableConnectionReuse = true;
        private boolean enableDetailedLogging = true;
        private boolean enableMetrics = true;
        private int connectionTestInterval = 30;
        private boolean failFast = false;
    }
}

// ============================================================================
// ENHANCED gRPC CLIENT SERVICE WITH CUSTOM CONFIGURATION
// ============================================================================

@Service
@Slf4j
public class QuarkusUserClient {

    private final UserServiceGrpc.UserServiceBlockingStub blockingStub;
    private final UserServiceGrpc.UserServiceStub asyncStub;
    private final ManagedChannel channel;
    private final GrpcClientProperties properties;
    private final MeterRegistry meterRegistry;
    
    // Connection metrics for POC testing
    private final Counter connectionReuseCounter;
    private final Timer callDurationTimer;
    private final Gauge connectionStateGauge;

    public QuarkusUserClient(@Qualifier("quarkusUserServiceChannel") ManagedChannel channel,
                           GrpcClientProperties properties,
                           @Autowired(required = false) MeterRegistry meterRegistry) {
        this.channel = channel;
        this.properties = properties;
        this.meterRegistry = meterRegistry;
        
        // Create stubs with custom configuration
        this.blockingStub = UserServiceGrpc.newBlockingStub(channel)
                .withDeadlineAfter(10, TimeUnit.SECONDS);
        this.asyncStub = UserServiceGrpc.newStub(channel)
                .withDeadlineAfter(10, TimeUnit.SECONDS);
        
        // Initialize metrics for POC testing
        if (meterRegistry != null) {
            this.connectionReuseCounter = Counter.builder("grpc.connection.reuse")
                    .description("Number of times gRPC connection was reused")
                    .tag("service", "user-service")
                    .register(meterRegistry);
                    
            this.callDurationTimer = Timer.builder("grpc.call.duration")
                    .description("Duration of gRPC calls")
                    .tag("service", "user-service")
                    .register(meterRegistry);
                    
            this.connectionStateGauge = Gauge.builder("grpc.connection.state")
                    .description("Current connection state")
                    .tag("service", "user-service")
                    .register(meterRegistry, this, client -> getConnectionStateValue());
        } else {
            this.connectionReuseCounter = null;
            this.callDurationTimer = null;
            this.connectionStateGauge = null;
        }
    }

    public UserProto.User createUser(UserProto.CreateUserRequest request) {
        Timer.Sample sample = callDurationTimer != null ? Timer.start(meterRegistry) : null;
        
        try {
            logConnectionReuse();
            
            UserProto.User result = blockingStub.createUser(request);
            
            if (connectionReuseCounter != null) {
                connectionReuseCounter.increment();
            }
            
            return result;
            
        } catch (StatusRuntimeException e) {
            log.error("gRPC call failed - Status: {}, Description: {}", 
                     e.getStatus().getCode(), e.getStatus().getDescription());
            throw new GrpcServiceException("User creation failed", "user-service", e);
        } catch (Exception e) {
            log.error("Unexpected error in gRPC call", e);
            throw new QuarkusServiceUnavailableException("user-service", e);
        } finally {
            if (sample != null) {
                sample.stop(callDurationTimer);
            }
        }
    }

    public CompletableFuture<UserProto.User> createUserAsync(UserProto.CreateUserRequest request) {
        CompletableFuture<UserProto.User> future = new CompletableFuture<>();
        Timer.Sample sample = callDurationTimer != null ? Timer.start(meterRegistry) : null;
        
        logConnectionReuse();
        
        asyncStub.createUser(request, new StreamObserver<UserProto.User>() {
            @Override
            public void onNext(UserProto.User user) {
                future.complete(user);
                if (connectionReuseCounter != null) {
                    connectionReuseCounter.increment();
                }
            }

            @Override
            public void onError(Throwable throwable) {
                if (throwable instanceof StatusRuntimeException) {
                    future.completeExceptionally(
                        new GrpcServiceException("Async user creation failed", "user-service", throwable));
                } else {
                    future.completeExceptionally(
                        new QuarkusServiceUnavailableException("user-service", throwable));
                }
            }

            @Override
            public void onCompleted() {
                if (sample != null) {
                    sample.stop(callDurationTimer);
                }
            }
        });

        return future;
    }

    // POC Testing Methods
    public ConnectionInfo getConnectionInfo() {
        ConnectivityState state = channel.getState(false);
        return ConnectionInfo.builder()
                .state(state.name())
                .isReady(state == ConnectivityState.READY)
                .channelHashCode(channel.hashCode())
                .connectionReuseCount(connectionReuseCounter != null ? 
                    (long) connectionReuseCounter.count() : 0)
                .build();
    }

    public boolean testConnection() {
        try {
            // Force connection state check
            ConnectivityState state = channel.getState(true);
            log.info("Connection test - State: {}", state);
            return state == ConnectivityState.READY || state == ConnectivityState.CONNECTING;
        } catch (Exception e) {
            log.error("Connection test failed", e);
            return false;
        }
    }

    public void forceReconnect() {
        try {
            channel.resetConnectBackoff();
            log.info("Forced channel reconnection");
        } catch (Exception e) {
            log.error("Failed to force reconnection", e);
        }
    }

    private void logConnectionReuse() {
        if (properties.getPocTest().isEnableDetailedLogging()) {
            ConnectivityState state = channel.getState(false);
            log.debug("Using gRPC connection - State: {}, Channel: {}", 
                     state, channel.hashCode());
        }
    }

    private double getConnectionStateValue() {
        ConnectivityState state = channel.getState(false);
        return switch (state) {
            case READY -> 1.0;
            case CONNECTING -> 0.5;
            case IDLE -> 0.3;
            case TRANSIENT_FAILURE -> -0.5;
            case SHUTDOWN -> -1.0;
        };
    }

    @Data
    @Builder
    public static class ConnectionInfo {
        private String state;
        private boolean isReady;
        private int channelHashCode;
        private long connectionReuseCount;
    }
}

// ============================================================================
// CUSTOM INTERCEPTORS FOR POC TESTING
// ============================================================================

public class ConnectionMonitoringInterceptor implements ClientInterceptor {
    
    private final String serviceName;
    private final AtomicLong callCount = new AtomicLong(0);
    
    public ConnectionMonitoringInterceptor(String serviceName) {
        this.serviceName = serviceName;
    }

    @Override
    public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
            MethodDescriptor<ReqT, RespT> method, 
            CallOptions callOptions, 
            Channel next) {
        
        long callId = callCount.incrementAndGet();
        log.debug("gRPC Call #{} to {}: {}", callId, serviceName, method.getFullMethodName());
        
        return new ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT>(
                next.newCall(method, callOptions)) {
            
            @Override
            public void start(Listener<RespT> responseListener, Metadata headers) {
                headers.put(Metadata.Key.of("call-id", Metadata.ASCII_STRING_MARSHALLER), 
                           String.valueOf(callId));
                headers.put(Metadata.Key.of("service-name", Metadata.ASCII_STRING_MARSHALLER), 
                           serviceName);
                
                super.start(new ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT>(responseListener) {
                    @Override
                    public void onClose(Status status, Metadata trailers) {
                        log.debug("gRPC Call #{} completed - Status: {}", callId, status.getCode());
                        super.onClose(status, trailers);
                    }
                }, headers);
            }
        };
    }
}

public class RetryInterceptor implements ClientInterceptor {
    
    private final int maxRetryAttempts;
    
    public RetryInterceptor(int maxRetryAttempts) {
        this.maxRetryAttempts = maxRetryAttempts;
    }

    @Override
    public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
            MethodDescriptor<ReqT, RespT> method, 
            CallOptions callOptions, 
            Channel next) {
        
        return new ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT>(
                next.newCall(method, callOptions)) {
            
            private int attemptCount = 0;
            
            @Override
            public void start(Listener<RespT> responseListener, Metadata headers) {
                super.start(new ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT>(responseListener) {
                    @Override
                    public void onClose(Status status, Metadata trailers) {
                        if (shouldRetry(status) && attemptCount < maxRetryAttempts) {
                            attemptCount++;
                            log.warn("Retrying gRPC call {} (attempt {}/{})", 
                                   method.getFullMethodName(), attemptCount, maxRetryAttempts);
                            // Implement retry logic here
                        }
                        super.onClose(status, trailers);
                    }
                }, headers);
            }
            
            private boolean shouldRetry(Status status) {
                return status.getCode() == Status.Code.UNAVAILABLE ||
                       status.getCode() == Status.Code.DEADLINE_EXCEEDED;
            }
        };
    }
}